name: Kubernetes CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          # currently we do not support cd to production, its only for future reference 
          - production
env:
  CI: false
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  DEPLOYMENT_BRANCH: ${{ vars.DEPLOYMENT_BRANCH }}
  ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}
  GITHUB_ACTIONS_USER_NAME: ${{ vars.GH_ACTIONS_USER_NAME }}
  COMMIT: ${{ github.sha }}
permissions:
  id-token: write
  contents: read
jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.filter.outputs.frontend }}
      backend_changed: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v3

      - name: Check changed files
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
  build-and-push:
    name: Build and Push Docker Images
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
      DEPLOYMENT_BRANCH: ${{ vars.DEPLOYMENT_BRANCH }}
      ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}
      GITHUB_ACTIONS_USER_NAME: ${{ vars.GH_ACTIONS_USER_NAME }}
      COMMIT: ${{ github.sha }}
    strategy:
      matrix:
        service: [frontend, backend]
    outputs:
      service: ${{ matrix.service }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS ECR Details
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
      - name: Build and push Docker image
        id: build-and-push
        if: |
          (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend_changed == 'true') ||
          (matrix.service == 'backend' && needs.detect-changes.outputs.backend_changed == 'true')
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${COMMIT::7}
          SERVICE="${{ matrix.service }}"
          echo "Building and pushing $SERVICE image with tag $IMAGE_TAG"

          DOCKERFILE_PATH="$SERVICE/Dockerfile"
          CONTEXT_DIR="$SERVICE"
          ECR_REPOSITORY="$ECR_REPOSITORY_PREFIX/${SERVICE}"

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH $CONTEXT_DIR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  update-helm-values:
    name: Update Helm Values
    needs: [build-and-push, detect-changes]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
      DEPLOYMENT_BRANCH: ${{ vars.DEPLOYMENT_BRANCH }}
      ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}
      GITHUB_ACTIONS_USER_NAME: ${{ vars.GH_ACTIONS_USER_NAME }}
      COMMIT: ${{ github.sha }}
    strategy:
      matrix:
        service: [frontend, backend]
    steps:
      - name: Set up SSH for private repo access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOYMENTS_WRITE }}
      - name: Clone deployments repo (specific branch)
        run: |
          git clone --depth=1 --branch $DEPLOYMENT_BRANCH git@github.com:alpenlabs/deployments.git deployments
          cd deployments
          git checkout $DEPLOYMENT_BRANCH

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Update Docker image tag in Helm values
        if: |
          (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend_changed == 'true') ||
          (matrix.service == 'backend' && needs.detect-changes.outputs.backend_changed == 'true')
        env:
          SERVICE: ${{ matrix.service }}
          SHORT_TAG: ${{ vars.COMMIT }}
        run: |
          SHORT_TAG=${SHORT_TAG::7}
          VALUES_FILE="deployments/clusters/$CLUSTER_NAME/values/strata-apps-values.yaml"

          if [[ "$SERVICE" == "frontend" ]]; then
            yq eval -i ".batchExpFe.image.tag = \"$SHORT_TAG\"" $VALUES_FILE
          elif [[ "$SERVICE" == "backend" ]]; then
            yq eval -i ".batchExpBe.image.tag = \"$SHORT_TAG\"" $VALUES_FILE
          fi
      - name: Commit and push changes
        if: |
          (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend_changed == 'true') ||
          (matrix.service == 'backend' && needs.detect-changes.outputs.backend_changed == 'true')
        env:
          SERVICE: ${{ matrix.service }}
          SHORT_TAG: ${{ github.sha }}
        run: |
          SHORT_TAG=${SHORT_TAG::7}
          cd deployments
          git config user.name "$GITHUB_ACTIONS_USER_NAME"
          git config user.email "$GITHUB_ACTIONS_USER_NAME@alpenlabs.io"

          if git diff --quiet; then
            echo "No changes to commit."
          else
            git add clusters/$CLUSTER_NAME/values/strata-apps-values.yaml
            git commit -m "Update $SERVICE image tag to $SHORT_TAG"
            git pull --rebase origin $DEPLOYMENT_BRANCH
            git push origin $DEPLOYMENT_BRANCH 
          fi